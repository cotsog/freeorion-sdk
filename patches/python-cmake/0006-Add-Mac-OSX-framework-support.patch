From 7e31c4af755707436b629c56126568fb94426be5 Mon Sep 17 00:00:00 2001
From: Marcel Metz <mmetz@adrian-broher.net>
Date: Sat, 9 Apr 2016 20:16:24 +0200
Subject: [PATCH] Add Mac OSX framework support

---
 CMakeLists.txt                 |   8 +
 cmake/libpython/CMakeLists.txt | 891 +++++++++++++++++++++--------------------
 2 files changed, 460 insertions(+), 439 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7550599..19eba46 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -79,6 +79,14 @@ else()
   set(BUILD_WININST OFF)
   set(BUILD_WININST_ALWAYS OFF)
 endif()
+if(APPLE)
+  option(BUILD_FRAMEWORK "Build a Mac OSX Framework" OFF)
+  if(BUILD_FRAMEWORK)
+      set(BUILD_LIBPYTHON_SHARED ON CACHE BOOL "Forced to ON because of BUILD_FRAMEWORK=ON" FORCE)
+  endif()
+else()
+  set(BUILD_FRAMEWORK OFF)
+endif()
 option(INSTALL_DEVELOPMENT "Install files required to develop C extensions" ON)
 option(INSTALL_MANUAL "Install man files" ON)
 option(INSTALL_TEST "Install test files" ON)
diff --git a/cmake/libpython/CMakeLists.txt b/cmake/libpython/CMakeLists.txt
index 2a2ec4a..6d612ed 100644
--- a/cmake/libpython/CMakeLists.txt
+++ b/cmake/libpython/CMakeLists.txt
@@ -1,442 +1,442 @@
-add_definitions(-DPy_BUILD_CORE)
-add_definitions(-DNDEBUG)
-
-set(MODULE_SOURCES # Equivalent to MODULE_OBJS in Makefile.pre
-    ${PROJECT_BINARY_DIR}/CMakeFiles/config.c
-    ${SRC_DIR}/Modules/gcmodule.c
-    ${SRC_DIR}/Modules/main.c
-)
-if(UNIX)
-    list(APPEND MODULE_SOURCES
-        ${SRC_DIR}/Modules/getpath.c
-    )
-    set(PYTHONPATH "${EXTRA_PYTHONPATH}:lib-dynload:plat-${PY_PLATFORM}")
-    if(ENABLE_TKINTER)
-        set(PYTHONPATH "${PYTHONPATH}:lib-tk")
-    endif()
-    set_property(
-        SOURCE ${SRC_DIR}/Modules/getpath.c
-        PROPERTY COMPILE_DEFINITIONS
-            PREFIX="${CMAKE_INSTALL_PREFIX}"
-            EXEC_PREFIX="${CMAKE_INSTALL_PREFIX}"
-            VERSION="${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}"
-            VPATH="."
-            PYTHONPATH="${PYTHONPATH}"
-      )
-elseif(WIN32)
-    list(APPEND MODULE_SOURCES
-        ${SRC_DIR}/PC/getpathp.c
-    )
-    # HACK To workaround limitation in escaping logic of CMake, the pythonpath
-    #      separator is conditionally set depending of the version of Visual Studio.
-    #      See http://cmake.org/Bug/view.php?id=14073
-    if( ("${MSVC_VERSION}" VERSION_GREATER "1599") AND ("${CMAKE_GENERATOR}" MATCHES "^Visual Studio") )
-        set(PATHSEP "%3B")
-    elseif( (${MSVC}) AND ("${CMAKE_GENERATOR}" MATCHES "^Ninja") )
-        set(PATHSEP "\;")
-    elseif( (${MSVC}) AND ("${CMAKE_GENERATOR}" MATCHES "^NMake") )
-        set(PATHSEP "\;")
-    elseif(MINGW)
-        set(PATHSEP "\;")
-    else()
-        set(PATHSEP ";")
-    endif()
-    string(REPLACE "/" "\\\\" PYTHONHOME_ESCAPED ${PYTHONHOME})
-    string(REPLACE "/" "\\\\" EXTENSION_INSTALL_DIR_ESCAPED ${EXTENSION_INSTALL_DIR})
-    set(PYTHONPATH "${EXTRA_PYTHONPATH}")
-    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}")
-    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${EXTENSION_INSTALL_DIR_ESCAPED}")
-    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${EXTENSION_INSTALL_DIR_ESCAPED}\\\\${CMAKE_CFG_INTDIR}")
-    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}\\\\plat-${PY_PLATFORM}")
-    if(ENABLE_TKINTER)
-        set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}\\\\lib-tk")
-    endif()
-
-    set(_wide_char_modifier)
-    if(IS_PY3)
-        set(_wide_char_modifier "L")
-    endif()
-
-    set_property(
-        SOURCE ${SRC_DIR}/PC/getpathp.c
-        PROPERTY COMPILE_DEFINITIONS
-            "LANDMARK=${_wide_char_modifier}\"${PYTHONHOME_ESCAPED}\\\\os.py\""
-            "PYTHONPATH=${_wide_char_modifier}\"${PYTHONPATH}\""
-    )
-endif()
-
-set(PARSER_COMMON_SOURCES # Equivalent to POBJS in Makefile.pre
-    ${SRC_DIR}/Parser/acceler.c
-    ${SRC_DIR}/Parser/bitset.c
-    ${SRC_DIR}/Parser/firstsets.c
-    ${SRC_DIR}/Parser/grammar1.c
-    ${SRC_DIR}/Parser/grammar.c
-    ${SRC_DIR}/Parser/listnode.c
-    ${SRC_DIR}/Parser/metagrammar.c
-    ${SRC_DIR}/Parser/node.c
-    ${SRC_DIR}/Parser/parser.c
-    ${SRC_DIR}/Parser/pgen.c
-)
-
-set(OBJECT2_SOURCES
-    ${SRC_DIR}/Objects/bufferobject.c
-    ${SRC_DIR}/Objects/cobject.c
-    ${SRC_DIR}/Objects/intobject.c
-    ${SRC_DIR}/Objects/stringobject.c
-)
-
-set(OBJECT3_SOURCES
-    ${SRC_DIR}/Objects/accu.c
-    ${SRC_DIR}/Objects/bytesobject.c
-    ${SRC_DIR}/Objects/namespaceobject.c
-    ${SRC_DIR}/Objects/odictobject.c
-)
-if(MSVC)
-    list(APPEND OBJECT2_SOURCES
-        ${SRC_DIR}/PC/invalid_parameter_handler.c
-    )
-    list(APPEND OBJECT3_SOURCES
-        ${SRC_DIR}/PC/invalid_parameter_handler.c
-    )
-endif()
-
-set(OBJECT_COMMON_SOURCES # Equivalent to OBJECT_OBJS in Makefile.pre
-    ${OBJECT${PY_VERSION_MAJOR}_SOURCES}
-    ${SRC_DIR}/Objects/abstract.c
-    ${SRC_DIR}/Objects/boolobject.c
-    ${SRC_DIR}/Objects/bytearrayobject.c
-    ${SRC_DIR}/Objects/bytes_methods.c
-    ${SRC_DIR}/Objects/capsule.c
-    ${SRC_DIR}/Objects/cellobject.c
-    ${SRC_DIR}/Objects/classobject.c
-    ${SRC_DIR}/Objects/codeobject.c
-    ${SRC_DIR}/Objects/complexobject.c
-    ${SRC_DIR}/Objects/descrobject.c
-    ${SRC_DIR}/Objects/dictobject.c
-    ${SRC_DIR}/Objects/enumobject.c
-    ${SRC_DIR}/Objects/exceptions.c
-    ${SRC_DIR}/Objects/fileobject.c
-    ${SRC_DIR}/Objects/floatobject.c
-    ${SRC_DIR}/Objects/frameobject.c
-    ${SRC_DIR}/Objects/funcobject.c
-    ${SRC_DIR}/Objects/genobject.c
-    ${SRC_DIR}/Objects/iterobject.c
-    ${SRC_DIR}/Objects/listobject.c
-    ${SRC_DIR}/Objects/longobject.c
-    ${SRC_DIR}/Objects/memoryobject.c
-    ${SRC_DIR}/Objects/methodobject.c
-    ${SRC_DIR}/Objects/moduleobject.c
-    ${SRC_DIR}/Objects/object.c
-    ${SRC_DIR}/Objects/obmalloc.c
-    ${SRC_DIR}/Objects/rangeobject.c
-    ${SRC_DIR}/Objects/setobject.c
-    ${SRC_DIR}/Objects/sliceobject.c
-    ${SRC_DIR}/Objects/structseq.c
-    ${SRC_DIR}/Objects/tupleobject.c
-    ${SRC_DIR}/Objects/typeobject.c
-    ${SRC_DIR}/Objects/unicodectype.c
-    ${SRC_DIR}/Objects/unicodeobject.c
-    ${SRC_DIR}/Objects/weakrefobject.c
-)
-
-if(CMAKE_C_COMPILER_ID MATCHES GNU)
-    foreach(filename class complex float int method string type unicode weakref)
-        set_property(SOURCE ${SRC_DIR}/Objects/${filename}object.c PROPERTY COMPILE_FLAGS -Wno-unused-value)
-    endforeach()
-endif()
-
-set(DYNLOAD_SOURCES
-  )
-
-if(UNIX AND HAVE_DLOPEN)
-    list(APPEND DYNLOAD_SOURCES
-        ${SRC_DIR}/Python/dynload_shlib.c
-    )
-    if(IS_PY3)
-    set_property(
-        SOURCE ${SRC_DIR}/Python/dynload_shlib.c
-        PROPERTY COMPILE_DEFINITIONS
-            SOABI="${SOABI}"
-        )
-    endif()
-elseif(WIN32)
-    list(APPEND DYNLOAD_SOURCES
-        ${SRC_DIR}/PC/dl_nt.c
-        ${SRC_DIR}/Python/dynload_win.c
-        )
-    set_property(
-        SOURCE ${SRC_DIR}/PC/dl_nt.c
-        PROPERTY COMPILE_DEFINITIONS Py_ENABLE_SHARED
-    )
-    if(MSVC)
-        add_compile_options(/wd4101 /wd4018 /wd4244 /wd4996)
-    endif()
-endif()
-
-set(THREAD_SOURCES )
-if(WITH_THREAD)
-    list(APPEND THREAD_SOURCES
-        ${SRC_DIR}/Python/thread.c
-    )
-endif()
-
-set(PYTHON2_COMMON_SOURCES
-    ${SRC_DIR}/Python/formatter_string.c
-    ${SRC_DIR}/Python/pystrtod.c
-)
-if(WIN32)
-    list(APPEND PYTHON2_COMMON_SOURCES
-        ${SRC_DIR}/PC/import_nt.c
-    )
-endif()
-
-set(PYTHON3_COMMON_SOURCES
-    ${SRC_DIR}/Python/dynamic_annotations.c
-    ${SRC_DIR}/Python/fileutils.c
-    ${SRC_DIR}/Python/pyhash.c
-    ${SRC_DIR}/Python/pylifecycle.c
-    ${SRC_DIR}/Python/pystrhex.c
-    ${SRC_DIR}/Python/pystrtod.c
-    ${SRC_DIR}/Python/pytime.c
-)
-
-set(PYTHON_COMMON_SOURCES
-    ${DYNLOAD_SOURCES}
-    ${PYTHON${PY_VERSION_MAJOR}_COMMON_SOURCES}
-    ${THREAD_SOURCES}
-    ${SRC_DIR}/Python/asdl.c
-    ${SRC_DIR}/Python/ast.c
-    ${SRC_DIR}/Python/bltinmodule.c
-    ${SRC_DIR}/Python/ceval.c
-    ${SRC_DIR}/Python/codecs.c
-    ${SRC_DIR}/Python/compile.c
-    ${SRC_DIR}/Python/dtoa.c
-    ${SRC_DIR}/Python/errors.c
-    ${SRC_DIR}/Python/formatter_unicode.c
-    ${SRC_DIR}/Python/future.c
-    ${SRC_DIR}/Python/getargs.c
-    ${SRC_DIR}/Python/getcompiler.c
-    ${SRC_DIR}/Python/getcopyright.c
-    ${SRC_DIR}/Python/getopt.c
-    ${SRC_DIR}/Python/getplatform.c
-    ${SRC_DIR}/Python/getversion.c
-    ${SRC_DIR}/Python/graminit.c
-    ${SRC_DIR}/Python/import.c
-    ${SRC_DIR}/Python/importdl.c
-    ${SRC_DIR}/Python/marshal.c
-    ${SRC_DIR}/Python/modsupport.c
-    ${SRC_DIR}/Python/mysnprintf.c
-    ${SRC_DIR}/Python/mystrtoul.c
-    ${SRC_DIR}/Python/peephole.c
-    ${SRC_DIR}/Python/pyarena.c
-    ${SRC_DIR}/Python/pyctype.c
-    ${SRC_DIR}/Python/pyfpe.c
-    ${SRC_DIR}/Python/pymath.c
-    ${SRC_DIR}/Python/pystate.c
-    ${SRC_DIR}/Python/pystrcmp.c
-    ${SRC_DIR}/Python/Python-ast.c
-    ${SRC_DIR}/Python/pythonrun.c
-    ${SRC_DIR}/Python/random.c
-    ${SRC_DIR}/Python/structmember.c
-    ${SRC_DIR}/Python/symtable.c
-    ${SRC_DIR}/Python/sysmodule.c
-    ${SRC_DIR}/Python/traceback.c
-    ${SRC_DIR}/Python/_warnings.c
-)
-if(UNIX)
-    list(APPEND PYTHON_COMMON_SOURCES
-        ${SRC_DIR}/Python/frozenmain.c
-    )
-else()
-    list(APPEND PYTHON_COMMON_SOURCES
-        ${SRC_DIR}/Python/frozen.c
-    )
-endif()
-
-if(UNIX OR MINGW)
-    set_property(
-        SOURCE ${SRC_DIR}/Python/getplatform.c
-        PROPERTY COMPILE_DEFINITIONS
-            PLATFORM="${PY_PLATFORM}"
-    )
-    if(IS_PY3)
-    set_property(
-        SOURCE ${SRC_DIR}/Python/sysmodule.c
-        PROPERTY COMPILE_DEFINITIONS
-            ABIFLAGS="${ABIFLAGS}"
-        )
-    endif()
-endif()
-
-list(APPEND MODULE_SOURCES
-    ${SRC_DIR}/Modules/_codecsmodule.c
-    ${SRC_DIR}/Modules/errnomodule.c
-    ${SRC_DIR}/Modules/signalmodule.c
-    ${SRC_DIR}/Modules/_sre.c
-    ${SRC_DIR}/Modules/symtablemodule.c
-    ${SRC_DIR}/Modules/_weakref.c
-    ${SRC_DIR}/Modules/xxsubtype.c
-    ${SRC_DIR}/Modules/zipimport.c
-)
-
-set(LIBPYTHON_OMIT_FROZEN_SOURCES
-    ${SRC_DIR}/Modules/getbuildinfo.c
-    ${SRC_DIR}/Parser/myreadline.c
-    ${SRC_DIR}/Parser/parsetok.c
-    ${SRC_DIR}/Parser/tokenizer.c
-    ${MODULE_SOURCES}
-    ${OBJECT_COMMON_SOURCES}
-    ${PARSER_COMMON_SOURCES}
-    ${PYTHON_COMMON_SOURCES}
-)
-
-# List of builtin extensions
-get_property(builtin_extensions GLOBAL PROPERTY builtin_extensions)
-
-# Collect builtin extension sources
-set(builtin_extension_sources)
-foreach(name ${builtin_extensions})
-    get_property(extension_${name}_sources GLOBAL PROPERTY extension_${name}_sources)
-    list(APPEND builtin_extension_sources ${extension_${name}_sources})
-endforeach()
-
-# XXX Associate Py_NO_ENABLE_SHARED with "_ctypes/callbacks.c" if corresponding
-#     extension is builtin.
-if(WIN32)
-    foreach(src ${builtin_extension_sources})
-        get_filename_component(filename ${src} NAME)
-        if(${filename} STREQUAL "callbacks.c")
-            set_property(SOURCE ${src} APPEND PROPERTY COMPILE_DEFINITIONS Py_NO_ENABLE_SHARED)
-        endif()
-    endforeach()
-endif()
-list(APPEND LIBPYTHON_OMIT_FROZEN_SOURCES ${builtin_extension_sources})
-
-# Collect builtin extension link libraries
-set(builtin_link_libraries)
-foreach(name ${builtin_extensions})
-    get_property(extension_${name}_link_libraries GLOBAL PROPERTY extension_${name}_link_libraries)
-    list(APPEND builtin_link_libraries ${extension_${name}_link_libraries})
-endforeach()
-
-# Collect builtin extension includedirs
-set(builtin_includedirs)
-foreach(name ${builtin_extensions})
-    get_property(extension_${name}_includedirs GLOBAL PROPERTY extension_${name}_includedirs)
-    list(APPEND builtin_includedirs ${extension_${name}_includedirs})
-endforeach()
-
-# Collect builtin extension definitions
-foreach(name ${builtin_extensions})
-    get_property(extension_${name}_definitions GLOBAL PROPERTY extension_${name}_definitions)
-    if(extension_${name}_definitions)
-        set_property(SOURCE ${extension_${name}_sources}
-            APPEND PROPERTY COMPILE_DEFINITIONS ${extension_${name}_definitions})
-    endif()
-endforeach()
-
-include_directories(${builtin_includedirs})
-
-# Create the parts of config.c for platform-specific and user-controlled
-# builtin modules.
-set(init_return_type_2 "void")
-set(init_prefix_2 "init")
-
-set(init_return_type_3 "PyObject*")
-set(init_prefix_3 "PyInit_")
-
-set(config_inits "")
-set(config_entries "")
-foreach(ext ${builtin_extensions})
-    set(config_inits "${config_inits}extern ${init_return_type_${PY_VERSION_MAJOR}} ${init_prefix_${PY_VERSION_MAJOR}}${ext}(void);\n")
-    set(config_entries "${config_entries}    {\"${ext}\", ${init_prefix_${PY_VERSION_MAJOR}}${ext}},\n")
-endforeach()
-
-configure_file(
-    ${PROJECT_SOURCE_DIR}/cmake/config_${PY_VERSION_MAJOR}.c.in
-    ${PROJECT_BINARY_DIR}/CMakeFiles/config.c
-    )
-
-# Collect libpython target libraries
-set(LIBPYTHON_TARGET_LIBRARIES
-  ${builtin_link_libraries}
-  )
-if(HAVE_LIBDL)
-  list(APPEND LIBPYTHON_TARGET_LIBRARIES ${HAVE_LIBDL})
-endif()
-if(WITH_THREAD)
-    list(APPEND LIBPYTHON_TARGET_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
-endif()
-if(UNIX)
-    list(APPEND LIBPYTHON_TARGET_LIBRARIES ${LIBUTIL_LIBRARIES} ${M_LIBRARIES})
-endif()
-if(WIN32 AND IS_PY3)
-    list(APPEND LIBPYTHON_TARGET_LIBRARIES ws2_32) # Required by signalmodule
-endif()
-
-set(LIBPYTHON_FROZEN_SOURCES )
-if(IS_PY3)
-
-# Build _freeze_importlib executable
-add_executable(_freeze_importlib
-  ${SRC_DIR}/Programs/_freeze_importlib.c
-  ${LIBPYTHON_OMIT_FROZEN_SOURCES}
-  )
-target_link_libraries(_freeze_importlib ${LIBPYTHON_TARGET_LIBRARIES})
-
-# Freeze modules
-set(LIBPYTHON_FROZEN_SOURCES
-  ${SRC_DIR}/Python/importlib_external.h
-  ${SRC_DIR}/Python/importlib.h
-)
-add_custom_command(
-  OUTPUT ${LIBPYTHON_FROZEN_SOURCES}
-  COMMAND
-    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
-      ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
-      ${SRC_DIR}/Python/importlib_external.h
-  COMMAND
-    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
-      ${SRC_DIR}/Lib/importlib/_bootstrap.py
-      ${SRC_DIR}/Python/importlib.h
-  DEPENDS
-    _freeze_importlib
-    ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
-    ${SRC_DIR}/Lib/importlib/_bootstrap.py
-)
-
-# This is a convenience target allowing to regenerate
-# the frozen sources.
-add_custom_target(freeze_modules DEPENDS ${LIBPYTHON_FROZEN_SOURCES})
-
-endif()
-
-# Build pgen executable
-set(PGEN2_SOURCES
-    ${SRC_DIR}/Parser/parsetok.c
-)
-set(PGEN3_SOURCES
-    ${SRC_DIR}/Python/dynamic_annotations.c
-    ${SRC_DIR}/Parser/parsetok_pgen.c
-)
-add_executable(pgen
-    ${PARSER_COMMON_SOURCES}
-    ${PGEN${PY_VERSION_MAJOR}_SOURCES}
-    ${SRC_DIR}/Objects/obmalloc.c
-    ${SRC_DIR}/Python/mysnprintf.c
-    ${SRC_DIR}/Python/pyctype.c
-    ${SRC_DIR}/Parser/tokenizer_pgen.c
-    ${SRC_DIR}/Parser/printgrammar.c
-    ${SRC_DIR}/Parser/pgenmain.c
-)
-
-# Collect libpython sources
-set(LIBPYTHON_SOURCES
-    ${LIBPYTHON_OMIT_FROZEN_SOURCES}
-    ${LIBPYTHON_FROZEN_SOURCES}
-)
-if(UNIX)
-    list(APPEND LIBPYTHON_SOURCES
+./dep/Frameworks/Python.framework/add_definitions(-DPy_BUILD_CORE)
+./dep/Frameworks/Python.framework/add_definitions(-DNDEBUG)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(MODULE_SOURCES # Equivalent to MODULE_OBJS in Makefile.pre
+./dep/Frameworks/Python.framework/    ${PROJECT_BINARY_DIR}/CMakeFiles/config.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/gcmodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/main.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/if(UNIX)
+./dep/Frameworks/Python.framework/    list(APPEND MODULE_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/Modules/getpath.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/    set(PYTHONPATH "${EXTRA_PYTHONPATH}:lib-dynload:plat-${PY_PLATFORM}")
+./dep/Frameworks/Python.framework/    if(ENABLE_TKINTER)
+./dep/Frameworks/Python.framework/        set(PYTHONPATH "${PYTHONPATH}:lib-tk")
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/    set_property(
+./dep/Frameworks/Python.framework/        SOURCE ${SRC_DIR}/Modules/getpath.c
+./dep/Frameworks/Python.framework/        PROPERTY COMPILE_DEFINITIONS
+./dep/Frameworks/Python.framework/            PREFIX="${CMAKE_INSTALL_PREFIX}"
+./dep/Frameworks/Python.framework/            EXEC_PREFIX="${CMAKE_INSTALL_PREFIX}"
+./dep/Frameworks/Python.framework/            VERSION="${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}"
+./dep/Frameworks/Python.framework/            VPATH="."
+./dep/Frameworks/Python.framework/            PYTHONPATH="${PYTHONPATH}"
+./dep/Frameworks/Python.framework/      )
+./dep/Frameworks/Python.framework/elseif(WIN32)
+./dep/Frameworks/Python.framework/    list(APPEND MODULE_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/PC/getpathp.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/    # HACK To workaround limitation in escaping logic of CMake, the pythonpath
+./dep/Frameworks/Python.framework/    #      separator is conditionally set depending of the version of Visual Studio.
+./dep/Frameworks/Python.framework/    #      See http://cmake.org/Bug/view.php?id=14073
+./dep/Frameworks/Python.framework/    if( ("${MSVC_VERSION}" VERSION_GREATER "1599") AND ("${CMAKE_GENERATOR}" MATCHES "^Visual Studio") )
+./dep/Frameworks/Python.framework/        set(PATHSEP "%3B")
+./dep/Frameworks/Python.framework/    elseif( (${MSVC}) AND ("${CMAKE_GENERATOR}" MATCHES "^Ninja") )
+./dep/Frameworks/Python.framework/        set(PATHSEP "\;")
+./dep/Frameworks/Python.framework/    elseif( (${MSVC}) AND ("${CMAKE_GENERATOR}" MATCHES "^NMake") )
+./dep/Frameworks/Python.framework/        set(PATHSEP "\;")
+./dep/Frameworks/Python.framework/    elseif(MINGW)
+./dep/Frameworks/Python.framework/        set(PATHSEP "\;")
+./dep/Frameworks/Python.framework/    else()
+./dep/Frameworks/Python.framework/        set(PATHSEP ";")
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/    string(REPLACE "/" "\\\\" PYTHONHOME_ESCAPED ${PYTHONHOME})
+./dep/Frameworks/Python.framework/    string(REPLACE "/" "\\\\" EXTENSION_INSTALL_DIR_ESCAPED ${EXTENSION_INSTALL_DIR})
+./dep/Frameworks/Python.framework/    set(PYTHONPATH "${EXTRA_PYTHONPATH}")
+./dep/Frameworks/Python.framework/    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}")
+./dep/Frameworks/Python.framework/    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${EXTENSION_INSTALL_DIR_ESCAPED}")
+./dep/Frameworks/Python.framework/    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${EXTENSION_INSTALL_DIR_ESCAPED}\\\\${CMAKE_CFG_INTDIR}")
+./dep/Frameworks/Python.framework/    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}\\\\plat-${PY_PLATFORM}")
+./dep/Frameworks/Python.framework/    if(ENABLE_TKINTER)
+./dep/Frameworks/Python.framework/        set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}\\\\lib-tk")
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/    set(_wide_char_modifier)
+./dep/Frameworks/Python.framework/    if(IS_PY3)
+./dep/Frameworks/Python.framework/        set(_wide_char_modifier "L")
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/    set_property(
+./dep/Frameworks/Python.framework/        SOURCE ${SRC_DIR}/PC/getpathp.c
+./dep/Frameworks/Python.framework/        PROPERTY COMPILE_DEFINITIONS
+./dep/Frameworks/Python.framework/            "LANDMARK=${_wide_char_modifier}\"${PYTHONHOME_ESCAPED}\\\\os.py\""
+./dep/Frameworks/Python.framework/            "PYTHONPATH=${_wide_char_modifier}\"${PYTHONPATH}\""
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(PARSER_COMMON_SOURCES # Equivalent to POBJS in Makefile.pre
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/acceler.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/bitset.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/firstsets.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/grammar1.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/grammar.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/listnode.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/metagrammar.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/node.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/parser.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/pgen.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(OBJECT2_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/bufferobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/cobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/intobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/stringobject.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(OBJECT3_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/accu.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/bytesobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/namespaceobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/odictobject.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/if(MSVC)
+./dep/Frameworks/Python.framework/    list(APPEND OBJECT2_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/PC/invalid_parameter_handler.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/    list(APPEND OBJECT3_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/PC/invalid_parameter_handler.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(OBJECT_COMMON_SOURCES # Equivalent to OBJECT_OBJS in Makefile.pre
+./dep/Frameworks/Python.framework/    ${OBJECT${PY_VERSION_MAJOR}_SOURCES}
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/abstract.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/boolobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/bytearrayobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/bytes_methods.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/capsule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/cellobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/classobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/codeobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/complexobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/descrobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/dictobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/enumobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/exceptions.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/fileobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/floatobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/frameobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/funcobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/genobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/iterobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/listobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/longobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/memoryobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/methodobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/moduleobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/object.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/obmalloc.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/rangeobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/setobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/sliceobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/structseq.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/tupleobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/typeobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/unicodectype.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/unicodeobject.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/weakrefobject.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/if(CMAKE_C_COMPILER_ID MATCHES GNU)
+./dep/Frameworks/Python.framework/    foreach(filename class complex float int method string type unicode weakref)
+./dep/Frameworks/Python.framework/        set_property(SOURCE ${SRC_DIR}/Objects/${filename}object.c PROPERTY COMPILE_FLAGS -Wno-unused-value)
+./dep/Frameworks/Python.framework/    endforeach()
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(DYNLOAD_SOURCES
+./dep/Frameworks/Python.framework/  )
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/if(UNIX AND HAVE_DLOPEN)
+./dep/Frameworks/Python.framework/    list(APPEND DYNLOAD_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/Python/dynload_shlib.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/    if(IS_PY3)
+./dep/Frameworks/Python.framework/    set_property(
+./dep/Frameworks/Python.framework/        SOURCE ${SRC_DIR}/Python/dynload_shlib.c
+./dep/Frameworks/Python.framework/        PROPERTY COMPILE_DEFINITIONS
+./dep/Frameworks/Python.framework/            SOABI="${SOABI}"
+./dep/Frameworks/Python.framework/        )
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/elseif(WIN32)
+./dep/Frameworks/Python.framework/    list(APPEND DYNLOAD_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/PC/dl_nt.c
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/Python/dynload_win.c
+./dep/Frameworks/Python.framework/        )
+./dep/Frameworks/Python.framework/    set_property(
+./dep/Frameworks/Python.framework/        SOURCE ${SRC_DIR}/PC/dl_nt.c
+./dep/Frameworks/Python.framework/        PROPERTY COMPILE_DEFINITIONS Py_ENABLE_SHARED
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/    if(MSVC)
+./dep/Frameworks/Python.framework/        add_compile_options(/wd4101 /wd4018 /wd4244 /wd4996)
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(THREAD_SOURCES )
+./dep/Frameworks/Python.framework/if(WITH_THREAD)
+./dep/Frameworks/Python.framework/    list(APPEND THREAD_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/Python/thread.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(PYTHON2_COMMON_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/formatter_string.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pystrtod.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/if(WIN32)
+./dep/Frameworks/Python.framework/    list(APPEND PYTHON2_COMMON_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/PC/import_nt.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(PYTHON3_COMMON_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/dynamic_annotations.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/fileutils.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pyhash.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pylifecycle.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pystrhex.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pystrtod.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pytime.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(PYTHON_COMMON_SOURCES
+./dep/Frameworks/Python.framework/    ${DYNLOAD_SOURCES}
+./dep/Frameworks/Python.framework/    ${PYTHON${PY_VERSION_MAJOR}_COMMON_SOURCES}
+./dep/Frameworks/Python.framework/    ${THREAD_SOURCES}
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/asdl.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/ast.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/bltinmodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/ceval.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/codecs.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/compile.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/dtoa.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/errors.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/formatter_unicode.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/future.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/getargs.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/getcompiler.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/getcopyright.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/getopt.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/getplatform.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/getversion.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/graminit.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/import.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/importdl.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/marshal.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/modsupport.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/mysnprintf.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/mystrtoul.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/peephole.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pyarena.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pyctype.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pyfpe.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pymath.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pystate.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pystrcmp.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/Python-ast.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pythonrun.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/random.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/structmember.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/symtable.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/sysmodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/traceback.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/_warnings.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/if(UNIX)
+./dep/Frameworks/Python.framework/    list(APPEND PYTHON_COMMON_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/Python/frozenmain.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/else()
+./dep/Frameworks/Python.framework/    list(APPEND PYTHON_COMMON_SOURCES
+./dep/Frameworks/Python.framework/        ${SRC_DIR}/Python/frozen.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/if(UNIX OR MINGW)
+./dep/Frameworks/Python.framework/    set_property(
+./dep/Frameworks/Python.framework/        SOURCE ${SRC_DIR}/Python/getplatform.c
+./dep/Frameworks/Python.framework/        PROPERTY COMPILE_DEFINITIONS
+./dep/Frameworks/Python.framework/            PLATFORM="${PY_PLATFORM}"
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/    if(IS_PY3)
+./dep/Frameworks/Python.framework/    set_property(
+./dep/Frameworks/Python.framework/        SOURCE ${SRC_DIR}/Python/sysmodule.c
+./dep/Frameworks/Python.framework/        PROPERTY COMPILE_DEFINITIONS
+./dep/Frameworks/Python.framework/            ABIFLAGS="${ABIFLAGS}"
+./dep/Frameworks/Python.framework/        )
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/list(APPEND MODULE_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/_codecsmodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/errnomodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/signalmodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/_sre.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/symtablemodule.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/_weakref.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/xxsubtype.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/zipimport.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(LIBPYTHON_OMIT_FROZEN_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Modules/getbuildinfo.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/myreadline.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/parsetok.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/tokenizer.c
+./dep/Frameworks/Python.framework/    ${MODULE_SOURCES}
+./dep/Frameworks/Python.framework/    ${OBJECT_COMMON_SOURCES}
+./dep/Frameworks/Python.framework/    ${PARSER_COMMON_SOURCES}
+./dep/Frameworks/Python.framework/    ${PYTHON_COMMON_SOURCES}
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# List of builtin extensions
+./dep/Frameworks/Python.framework/get_property(builtin_extensions GLOBAL PROPERTY builtin_extensions)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Collect builtin extension sources
+./dep/Frameworks/Python.framework/set(builtin_extension_sources)
+./dep/Frameworks/Python.framework/foreach(name ${builtin_extensions})
+./dep/Frameworks/Python.framework/    get_property(extension_${name}_sources GLOBAL PROPERTY extension_${name}_sources)
+./dep/Frameworks/Python.framework/    list(APPEND builtin_extension_sources ${extension_${name}_sources})
+./dep/Frameworks/Python.framework/endforeach()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# XXX Associate Py_NO_ENABLE_SHARED with "_ctypes/callbacks.c" if corresponding
+./dep/Frameworks/Python.framework/#     extension is builtin.
+./dep/Frameworks/Python.framework/if(WIN32)
+./dep/Frameworks/Python.framework/    foreach(src ${builtin_extension_sources})
+./dep/Frameworks/Python.framework/        get_filename_component(filename ${src} NAME)
+./dep/Frameworks/Python.framework/        if(${filename} STREQUAL "callbacks.c")
+./dep/Frameworks/Python.framework/            set_property(SOURCE ${src} APPEND PROPERTY COMPILE_DEFINITIONS Py_NO_ENABLE_SHARED)
+./dep/Frameworks/Python.framework/        endif()
+./dep/Frameworks/Python.framework/    endforeach()
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/list(APPEND LIBPYTHON_OMIT_FROZEN_SOURCES ${builtin_extension_sources})
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Collect builtin extension link libraries
+./dep/Frameworks/Python.framework/set(builtin_link_libraries)
+./dep/Frameworks/Python.framework/foreach(name ${builtin_extensions})
+./dep/Frameworks/Python.framework/    get_property(extension_${name}_link_libraries GLOBAL PROPERTY extension_${name}_link_libraries)
+./dep/Frameworks/Python.framework/    list(APPEND builtin_link_libraries ${extension_${name}_link_libraries})
+./dep/Frameworks/Python.framework/endforeach()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Collect builtin extension includedirs
+./dep/Frameworks/Python.framework/set(builtin_includedirs)
+./dep/Frameworks/Python.framework/foreach(name ${builtin_extensions})
+./dep/Frameworks/Python.framework/    get_property(extension_${name}_includedirs GLOBAL PROPERTY extension_${name}_includedirs)
+./dep/Frameworks/Python.framework/    list(APPEND builtin_includedirs ${extension_${name}_includedirs})
+./dep/Frameworks/Python.framework/endforeach()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Collect builtin extension definitions
+./dep/Frameworks/Python.framework/foreach(name ${builtin_extensions})
+./dep/Frameworks/Python.framework/    get_property(extension_${name}_definitions GLOBAL PROPERTY extension_${name}_definitions)
+./dep/Frameworks/Python.framework/    if(extension_${name}_definitions)
+./dep/Frameworks/Python.framework/        set_property(SOURCE ${extension_${name}_sources}
+./dep/Frameworks/Python.framework/            APPEND PROPERTY COMPILE_DEFINITIONS ${extension_${name}_definitions})
+./dep/Frameworks/Python.framework/    endif()
+./dep/Frameworks/Python.framework/endforeach()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/include_directories(${builtin_includedirs})
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Create the parts of config.c for platform-specific and user-controlled
+./dep/Frameworks/Python.framework/# builtin modules.
+./dep/Frameworks/Python.framework/set(init_return_type_2 "void")
+./dep/Frameworks/Python.framework/set(init_prefix_2 "init")
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(init_return_type_3 "PyObject*")
+./dep/Frameworks/Python.framework/set(init_prefix_3 "PyInit_")
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(config_inits "")
+./dep/Frameworks/Python.framework/set(config_entries "")
+./dep/Frameworks/Python.framework/foreach(ext ${builtin_extensions})
+./dep/Frameworks/Python.framework/    set(config_inits "${config_inits}extern ${init_return_type_${PY_VERSION_MAJOR}} ${init_prefix_${PY_VERSION_MAJOR}}${ext}(void);\n")
+./dep/Frameworks/Python.framework/    set(config_entries "${config_entries}    {\"${ext}\", ${init_prefix_${PY_VERSION_MAJOR}}${ext}},\n")
+./dep/Frameworks/Python.framework/endforeach()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/configure_file(
+./dep/Frameworks/Python.framework/    ${PROJECT_SOURCE_DIR}/cmake/config_${PY_VERSION_MAJOR}.c.in
+./dep/Frameworks/Python.framework/    ${PROJECT_BINARY_DIR}/CMakeFiles/config.c
+./dep/Frameworks/Python.framework/    )
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Collect libpython target libraries
+./dep/Frameworks/Python.framework/set(LIBPYTHON_TARGET_LIBRARIES
+./dep/Frameworks/Python.framework/  ${builtin_link_libraries}
+./dep/Frameworks/Python.framework/  )
+./dep/Frameworks/Python.framework/if(HAVE_LIBDL)
+./dep/Frameworks/Python.framework/  list(APPEND LIBPYTHON_TARGET_LIBRARIES ${HAVE_LIBDL})
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/if(WITH_THREAD)
+./dep/Frameworks/Python.framework/    list(APPEND LIBPYTHON_TARGET_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/if(UNIX)
+./dep/Frameworks/Python.framework/    list(APPEND LIBPYTHON_TARGET_LIBRARIES ${LIBUTIL_LIBRARIES} ${M_LIBRARIES})
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/if(WIN32 AND IS_PY3)
+./dep/Frameworks/Python.framework/    list(APPEND LIBPYTHON_TARGET_LIBRARIES ws2_32) # Required by signalmodule
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/set(LIBPYTHON_FROZEN_SOURCES )
+./dep/Frameworks/Python.framework/if(IS_PY3)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Build _freeze_importlib executable
+./dep/Frameworks/Python.framework/add_executable(_freeze_importlib
+./dep/Frameworks/Python.framework/  ${SRC_DIR}/Programs/_freeze_importlib.c
+./dep/Frameworks/Python.framework/  ${LIBPYTHON_OMIT_FROZEN_SOURCES}
+./dep/Frameworks/Python.framework/  )
+./dep/Frameworks/Python.framework/target_link_libraries(_freeze_importlib ${LIBPYTHON_TARGET_LIBRARIES})
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Freeze modules
+./dep/Frameworks/Python.framework/set(LIBPYTHON_FROZEN_SOURCES
+./dep/Frameworks/Python.framework/  ${SRC_DIR}/Python/importlib_external.h
+./dep/Frameworks/Python.framework/  ${SRC_DIR}/Python/importlib.h
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/add_custom_command(
+./dep/Frameworks/Python.framework/  OUTPUT ${LIBPYTHON_FROZEN_SOURCES}
+./dep/Frameworks/Python.framework/  COMMAND
+./dep/Frameworks/Python.framework/    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
+./dep/Frameworks/Python.framework/      ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+./dep/Frameworks/Python.framework/      ${SRC_DIR}/Python/importlib_external.h
+./dep/Frameworks/Python.framework/  COMMAND
+./dep/Frameworks/Python.framework/    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
+./dep/Frameworks/Python.framework/      ${SRC_DIR}/Lib/importlib/_bootstrap.py
+./dep/Frameworks/Python.framework/      ${SRC_DIR}/Python/importlib.h
+./dep/Frameworks/Python.framework/  DEPENDS
+./dep/Frameworks/Python.framework/    _freeze_importlib
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Lib/importlib/_bootstrap.py
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# This is a convenience target allowing to regenerate
+./dep/Frameworks/Python.framework/# the frozen sources.
+./dep/Frameworks/Python.framework/add_custom_target(freeze_modules DEPENDS ${LIBPYTHON_FROZEN_SOURCES})
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/endif()
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Build pgen executable
+./dep/Frameworks/Python.framework/set(PGEN2_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/parsetok.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/set(PGEN3_SOURCES
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/dynamic_annotations.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/parsetok_pgen.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/add_executable(pgen
+./dep/Frameworks/Python.framework/    ${PARSER_COMMON_SOURCES}
+./dep/Frameworks/Python.framework/    ${PGEN${PY_VERSION_MAJOR}_SOURCES}
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Objects/obmalloc.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/mysnprintf.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Python/pyctype.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/tokenizer_pgen.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/printgrammar.c
+./dep/Frameworks/Python.framework/    ${SRC_DIR}/Parser/pgenmain.c
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/
+./dep/Frameworks/Python.framework/# Collect libpython sources
+./dep/Frameworks/Python.framework/set(LIBPYTHON_SOURCES
+./dep/Frameworks/Python.framework/    ${LIBPYTHON_OMIT_FROZEN_SOURCES}
+./dep/Frameworks/Python.framework/    ${LIBPYTHON_FROZEN_SOURCES}
+./dep/Frameworks/Python.framework/)
+./dep/Frameworks/Python.framework/if(UNIX)
+./dep/Frameworks/Python.framework/    list(APPEND LIBPYTHON_SOURCES
         ${SRC_DIR}/Python/frozen.c
     )
 endif()
@@ -468,11 +468,24 @@ function(add_libpython name type install component)
     # Export target
     set_property(GLOBAL APPEND PROPERTY PYTHON_TARGETS ${name})
 
+    if(BUILD_FRAMEWORK)
+        set_target_properties(${name} PROPERTIES
+            FRAMEWORK TRUE
+            FRAMEWORK_VERSION "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}"
+            MACOSX_FRAMEWORK_IDENTIFIER org.python.python
+            MACOSX_FRAMEWORK_SHORT_VERSION_STRING "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}"
+            MACOSX_FRAMEWORK_BUNDLE_VERSION "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}"
+            XCODE_ATTRIBUTE_INSTALL_PATH "@rpath"
+            OUTPUT_NAME Python
+        )
+    endif()
+
     if(install)
         install(TARGETS ${name}
             ARCHIVE DESTINATION ${LIBPYTHON_ARCHIVEDIR}
             LIBRARY DESTINATION ${LIBPYTHON_LIBDIR}
             RUNTIME DESTINATION ${LIBPYTHON_LIBDIR}
+            FRAMEWORK DESTINATION "Frameworks"
             COMPONENT ${component}
         )
     endif()
-- 
2.7.4

